{"version":3,"sources":["tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["Tweet","tweet","className","id","content","action","ActionBtn","handleClick","event","preventDefault","console","log","onClick","likes","TweetsList","newTweets","useState","tweetsInitial","setTweetsInitial","tweets","setTweets","useEffect","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","final","concat","length","map","index","key","TweetsComponent","textAreaRef","useRef","setNewTweets","onSubmit","newTweet","current","value","tempList","unshift","handleSubmit","ref","name","cols","rows","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qMAIaA,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpB,OAAO,yBAAKC,UAAU,IACjBD,EAAME,GADJ,MACWF,EAAMG,QACpB,kBAAC,EAAD,CAAWH,MAAOA,EAAOI,OAAO,SAChC,kBAAC,EAAD,CAAWJ,MAAOA,EAAOI,OAAO,WAChC,kBAAC,EAAD,CAAWJ,MAAOA,EAAOI,OAAO,cAI3BC,EAAY,SAAC,GAAuB,IAArBL,EAAoB,EAApBA,MAAOI,EAAa,EAAbA,OACzBE,EAAc,SAACC,GAEjB,OADAA,EAAMC,iBACEJ,GACJ,IAAK,OACD,OAAOK,QAAQC,IAAI,cACvB,IAAK,SACD,OAAOD,QAAQC,IAAI,gBACvB,IAAK,UACD,OAAOD,QAAQC,IAAI,iBACvB,QAAS,OAAO,OAIxB,OAAQN,GACJ,IAAK,OACD,OAAO,4BAAQO,QAAS,SAACJ,GAAD,OAAWD,EAAYC,KAASP,EAAMY,MAAvD,WACX,IAAK,SACD,OAAO,4BAAQD,QAAS,SAACJ,GAAD,OAAWD,EAAYC,KAASP,EAAMY,MAAvD,aACX,IAAK,UACD,OAAO,4BAAQD,QAAS,SAACJ,GAAD,OAAWD,EAAYC,KAAxC,WACX,QAAS,OAAO,OAIXM,EAAa,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACCC,mBAAS,IADV,mBAClCC,EADkC,KACnBC,EADmB,OAEbF,mBAAS,IAFI,mBAElCG,EAFkC,KAE1BC,EAF0B,KAiBzC,OAdAC,qBAAU,YCzCY,SAACC,GACvB,IAAMC,EAAM,IAAIC,eAIhBD,EAAIE,aADiB,OAErBF,EAAIG,KAJW,MACE,qCAIjBH,EAAII,OAAS,WACTL,EAASC,EAAIK,SAAUL,EAAIM,SAE/BN,EAAIO,QAAU,SAAUC,GACpBT,EAAS,CAAE,QAAW,4IAAgC,MAE1DC,EAAIS,ODoCAC,EAPmB,SAACL,EAAUC,GACX,MAAXA,EACAX,EAAiBU,GAEjBM,MAAM,gJAIf,IACHb,qBAAU,WACN,IAAMc,EAAQ,YAAIpB,GAAWqB,OAAOnB,GAChCkB,EAAME,SAAWlB,EAAOkB,QAAQjB,EAAUe,KAC/C,CAACpB,EAAWE,IACRE,EAAOmB,KAAI,SAACrC,EAAOsC,GACtB,OAAO,kBAAC,EAAD,CAAOtC,MAAOA,EAAOuC,IAAKD,QAK5BE,EAAkB,WAC3B,IAAMC,EAAcC,mBADa,EAEC3B,mBAAS,IAFV,mBAE1BD,EAF0B,KAEf6B,EAFe,KAgBjC,OACI,oCACI,0BAAMC,SAAU,SAACrC,GAAD,OAfH,SAACA,GAClBA,EAAMC,iBACN,IAAMqC,EAAWJ,EAAYK,QAAQC,MAC/BC,EAAQ,YAAOlC,GAErBkC,EAASC,QAAQ,CACb,GAAMD,EAASZ,OAAS,EACxB,MAAS,EACT,QAAWS,IAEfF,EAAaK,GACbP,EAAYK,QAAQC,MAAQ,GAIGG,CAAa3C,KACpC,8BAAU4C,IAAKV,EAAaW,KAAK,UAAUlD,GAAG,UAAUmD,KAAK,KAAKC,KAAK,OACvE,4BAAQC,KAAK,UAAb,qDAEJ,kBAAC,EAAD,CAAYzC,UAAWA,MEvEpB0C,EARH,WACV,OACE,oCACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,a","file":"static/js/main.80465093.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { loadTweets } from '../lookup';\n\n\nexport const Tweet = ({ tweet }) => {\n    return <div className=''>\n        {tweet.id} - {tweet.content}\n        <ActionBtn tweet={tweet} action='like' />\n        <ActionBtn tweet={tweet} action='unlike' />\n        <ActionBtn tweet={tweet} action='retweet' />\n    </div>\n}\n\nexport const ActionBtn = ({ tweet, action }) => {\n    const handleClick = (event) => {\n        event.preventDefault()\n        switch (action) {\n            case 'like':\n                return console.log('Like Click')\n            case 'unlike':\n                return console.log('Unlike Click')\n            case 'retweet':\n                return console.log('Retweet Click')\n            default: return null\n        }\n    }\n\n    switch (action) {\n        case 'like':\n            return <button onClick={(event) => handleClick(event)}>{tweet.likes} / Like</button>\n        case 'unlike':\n            return <button onClick={(event) => handleClick(event)}>{tweet.likes} / Unlike</button>\n        case 'retweet':\n            return <button onClick={(event) => handleClick(event)}>Retweet</button>\n        default: return null\n    }\n}\n\nexport const TweetsList = ({ newTweets }) => {\n    const [tweetsInitial, setTweetsInitial] = useState([])\n    const [tweets, setTweets] = useState([])\n    useEffect(() => {\n        const handleData = (response, status) => {\n            if (status === 200) {\n                setTweetsInitial(response)\n            } else {\n                alert('Ошибка с загрузкой данных')\n            }\n        }\n        loadTweets(handleData)\n    }, [])\n    useEffect(() => {\n        const final = [...newTweets].concat(tweetsInitial)\n        if (final.length !== tweets.length) setTweets(final)\n    }, [newTweets, tweetsInitial])\n    return tweets.map((tweet, index) => {\n        return <Tweet tweet={tweet} key={index} />\n    })\n}\n\n\nexport const TweetsComponent = () => {\n    const textAreaRef = useRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newTweet = textAreaRef.current.value\n        const tempList = [...newTweets]\n        // CHANGE THIS TO SERVER REQ\n        tempList.unshift({\n            'id': tempList.length + 1,\n            'likes': 0,\n            'content': newTweet\n        })\n        setNewTweets(tempList)\n        textAreaRef.current.value = ''\n    }\n    return (\n        <>\n            <form onSubmit={(event) => handleSubmit(event)}>\n                <textarea ref={textAreaRef} name=\"content\" id=\"content\" cols=\"30\" rows=\"10\"></textarea>\n                <button type=\"submit\">Добавить</button>\n            </form>\n            <TweetsList newTweets={newTweets} />\n        </>\n    )\n}","export const loadTweets = (callback) => {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const endpoint = 'http://127.0.0.1:8000/api/tweets/'\n    const responseType = 'json'\n    xhr.responseType = responseType;\n    xhr.open(method, endpoint)\n    xhr.onload = function () {\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        callback({ 'message': 'Какая-то ошибка с запросом' }, 400)\n    }\n    xhr.send()\n}\n","import React from 'react';\nimport { TweetsComponent } from './tweets';\n\n\nconst App = () => {\n  return (\n    <>\n      <TweetsComponent />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}